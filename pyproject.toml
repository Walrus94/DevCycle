[tool.poetry]
name = "devcycle"
version = "0.1.0"
description = "AI-Powered Application Development Lifecycle Automation System"
authors = ["DevCycle Team <team@devcycle.dev>"]
readme = "README.md"
packages = [{include = "devcycle"}]
license = "MIT"
homepage = "https://github.com/devcycle/devcycle"
repository = "https://github.com/devcycle/devcycle"
keywords = ["ai", "agents", "development", "automation", "ml", "huggingface"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[tool.poetry.dependencies]
python = "^3.9"
# Core AI/ML dependencies
transformers = "^4.53.0"
torch = "^2.1.0"
numpy = "^1.24.0"
pandas = "^2.0.0"
scikit-learn = "^1.3.0"

# Hugging Face ecosystem
huggingface-hub = {extras = ["typing"], version = "^0.34.4"}
datasets = "^2.14.0"
tokenizers = "^0.21.0"

# Web and API frameworks
fastapi = "^0.116.1"
starlette = "^0.47.2"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
requests = "^2.31.0"
httpx = "^0.25.0"

# Configuration and environment
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
python-dotenv = "^1.0.0"

# GCP Secret Manager
google-cloud-secret-manager = "^2.16.0"

# Async and concurrency
asyncio = "^3.4.3"
aiohttp = "^3.9.0"

# Redis for caching (optional, not required for auth)
redis = {extras = ["hiredis"], version = "^5.0.0"}
types-redis = "^4.6.0"

# Message queuing
confluent-kafka = "^2.3.0"

# Logging and monitoring
structlog = "^23.2.0"
tortoise-orm = {extras = ["asyncpg"], version = "^0.25.0"}
tortoise-orm-stubs = "^1.0.2"
aerich = "^0.7.2"
psycopg2-binary = "^2.9.10"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
fastapi-users = {extras = ["tortoise"], version = "^14.0.1"}
asyncpg = "^0.30.0"
python-multipart = "^0.0.20"
testcontainers = {extras = ["postgresql", "redis"], version = "^4.12.0"}
pip-audit = "^2.9.0"
fastapi-users-tortoise = "^0.2.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.3.0"
pytest-timeout = "^2.2.0"  # Add timeout plugin to prevent hanging tests
httpx = "^0.25.0"

# Code quality
black = "^24.3.0"
isort = "^5.12.0"
flake8 = "^6.1.0"
flake8-docstrings = "^1.7.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
pbr = "^5.11.0"  # Required by bandit

# Documentation
sphinx = "^6.0.0,<7.0.0"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^0.19.0"

# Development tools
ipython = "^8.17.0"
jupyter = "^1.0.0"
notebook = "^7.0.0"
testcontainers = {extras = ["postgresql", "redis"], version = "^4.12.0"}
types-passlib = "^1.7.7.20250602"
pytest-docker = "^3.2.3"

# Security
bandit = "^1.7.5"
pip-audit = "^2.9.0"
types-redis = "^4.6.0.20241004"

[tool.poetry.group.docs.dependencies]
sphinx = "^6.0.0,<7.0.0"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^0.19.0"
mkdocs = "^1.6.1"
mkdocs-material = "^9.6.18"
mkdocs-git-revision-date-localized-plugin = "^1.4.7"

[tool.poetry.scripts]
devcycle = "devcycle.cli:main"
devcycle-agent = "devcycle.agents.cli:main"


[tool.aerich]
tortoise_orm = "devcycle.core.database.tortoise_config.TORTOISE_ORM"
location = "./migrations"
src_folder = "./."

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["devcycle"]
known_third_party = ["pytest", "black", "isort", "flake8", "mypy"]
lines_between_sections = 1

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "torch.*",
    "numpy.*",
    "pandas.*",
    "sklearn.*",
    "fastapi.*",
    "uvicorn.*",
    "pydantic.*",
    "loguru.*",
    "structlog.*",
    "redis.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Test discovery and execution
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Test markers for different test types
markers = [
    "unit: Unit tests (fast, no external dependencies)",
    "integration: Integration tests (may use mocks)",
    "e2e: End-to-end tests (use testcontainers, slower)",
    "slow: Tests that take longer to run",
    "auth: Authentication and security tests",
    "database: Database-related tests",
    "api: API endpoint tests",
    "health: Health check endpoint tests",
]

# Test execution options
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
]

# Filter warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

# Test output
console_output_style = "progress"

# Environment variables for tests
env = [
    "TESTING = true",
    "PYTHONPATH = {toxinidir}",
]

[tool.coverage.run]
source = ["devcycle"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/devcycle/devcycle/issues"
"Documentation" = "https://devcycle.readthedocs.io/"
