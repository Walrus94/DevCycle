name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.6.1"

jobs:
  # Determine test strategy based on target branch
  test-strategy:
    name: Determine Test Strategy
    runs-on: ubuntu-latest
    outputs:
      run-unit: ${{ steps.strategy.outputs.run-unit }}
      run-integration: ${{ steps.strategy.outputs.run-integration }}
      run-e2e: ${{ steps.strategy.outputs.run-e2e }}
      test-level: ${{ steps.strategy.outputs.test-level }}
    steps:
      - name: Determine test strategy
        id: strategy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            target_branch="${{ github.base_ref }}"
          else
            target_branch="${{ github.ref_name }}"
          fi

          echo "Target branch: $target_branch"

          if [[ "$target_branch" == "main" ]]; then
            echo "run-unit=true" >> $GITHUB_OUTPUT
            echo "run-integration=true" >> $GITHUB_OUTPUT
            echo "run-e2e=true" >> $GITHUB_OUTPUT
            echo "test-level=full" >> $GITHUB_OUTPUT
            echo "ðŸŽ¯ Full test suite for main branch"
          elif [[ "$target_branch" == "develop" ]]; then
            echo "run-unit=true" >> $GITHUB_OUTPUT
            echo "run-integration=true" >> $GITHUB_OUTPUT
            echo "run-e2e=false" >> $GITHUB_OUTPUT
            echo "test-level=medium" >> $GITHUB_OUTPUT
            echo "ðŸ”„ Unit + Integration tests for develop branch"
          else
            echo "run-unit=true" >> $GITHUB_OUTPUT
            echo "run-integration=false" >> $GITHUB_OUTPUT
            echo "run-e2e=false" >> $GITHUB_OUTPUT
            echo "test-level=fast" >> $GITHUB_OUTPUT
            echo "ðŸš€ Unit tests only for feature branches"
          fi

  # Coverage Analysis
  coverage-analysis:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    needs: [test-strategy, unit-tests, integration-tests, e2e-tests]
    if: always() && (needs.unit-tests.result == 'success' || needs.integration-tests.result == 'success' || needs.e2e-tests.result == 'success')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Generate comprehensive coverage report
      run: |
        poetry run coverage combine || true
        poetry run coverage report --show-missing
        poetry run coverage html
        poetry run coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: comprehensive
        name: codecov-comprehensive

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  # Code Quality Checks (always run)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run Black (code formatting)
      run: poetry run black --check --diff .

    - name: Run isort (import sorting)
      run: poetry run isort --check-only --diff .

    - name: Run Flake8 (linting)
      run: poetry run flake8 .

    - name: Run MyPy (type checking)
      run: poetry run mypy .

  # Unit Tests (always run)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: test-strategy
    if: needs.test-strategy.outputs.run-unit == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run unit tests with coverage
      run: poetry run pytest tests/unit/ -v --tb=short --cov=devcycle --cov-report=xml --cov-report=term-missing --cov-fail-under=30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Integration Tests (develop and main only)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-strategy, unit-tests]
    if: needs.test-strategy.outputs.run-integration == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run integration tests with coverage
      run: poetry run pytest tests/integration/ -v --tb=short --cov=devcycle --cov-report=xml --cov-report=term-missing --cov-fail-under=70 --cov-append

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: integration
        name: codecov-umbrella

  # End-to-End Tests (main only)
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [test-strategy, integration-tests]
    if: needs.test-strategy.outputs.run-e2e == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run E2E tests with coverage
      run: poetry run pytest tests/e2e/ -v --tb=short --cov=devcycle --cov-report=xml --cov-report=term-missing --cov-fail-under=75 --cov-append

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: e2e
        name: codecov-umbrella

  # Build Validation (main only)
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [test-strategy, e2e-tests]
    if: needs.test-strategy.outputs.run-e2e == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Build package
      run: poetry build

    - name: Validate package
      run: |
        # Check if package was built successfully
        ls -la dist/
        # Validate package structure
        poetry run python -c "import devcycle; print('Package imports successfully')"


  # Security Scan (always run)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --no-interaction

    - name: Run pip-audit security scan
      run: poetry run pip-audit

    - name: Run bandit security scan
      run: poetry run bandit -r devcycle/ -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  # Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-strategy, code-quality, unit-tests, integration-tests, e2e-tests, security-scan, coverage-analysis]
    if: always()

    steps:
    - name: Test Summary
      run: |
        echo "ðŸŽ¯ Test Strategy: ${{ needs.test-strategy.outputs.test-level }}"
        echo "âœ… Code Quality: ${{ needs.code-quality.result }}"
        echo "âœ… Unit Tests: ${{ needs.unit-tests.result }}"
        echo "âœ… Integration Tests: ${{ needs.integration-tests.result }}"
        echo "âœ… E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "âœ… Security Scan: ${{ needs.security-scan.result }}"
        echo "âœ… Coverage Analysis: ${{ needs.coverage-analysis.result }}"



        if [[ "${{ needs.test-strategy.outputs.test-level }}" == "fast" ]]; then
          echo "ðŸš€ Fast feedback: Unit tests + Code quality + Security"
        elif [[ "${{ needs.test-strategy.outputs.test-level }}" == "medium" ]]; then
          echo "ðŸ”„ Medium thoroughness: Unit + Integration + Code quality + Security"
        else
          echo "ðŸŽ¯ Full validation: All tests + Code quality + Security + Build"
        fi
