version: '3.8'

services:
  # ACP Agents (replacing Kafka-based messaging)
  # Business Analyst Agent
  business-analyst-agent:
    build: .
    container_name: devcycle-business-analyst
    depends_on:
      app:
        condition: service_started
    environment:
      - ACP_SERVER_URL=http://app:8000
      - ACP_AGENT_ID=business-analyst
      - ACP_AGENT_NAME=Business Analyst Agent
      - ACP_AGENT_VERSION=1.0.0
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - LOG_LEVEL=INFO
    command: >
      bash -c "
        echo 'Starting Business Analyst Agent...' &&
        poetry run python -m devcycle.core.acp.agents.business_analyst_agent
      "
    restart: unless-stopped

  # Testing Agent
  testing-agent:
    build: .
    container_name: devcycle-testing-agent
    depends_on:
      app:
        condition: service_started
    environment:
      - ACP_SERVER_URL=http://app:8000
      - ACP_AGENT_ID=testing-agent
      - ACP_AGENT_NAME=Testing Agent
      - ACP_AGENT_VERSION=1.0.0
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - LOG_LEVEL=INFO
    command: >
      bash -c "
        echo 'Starting Testing Agent...' &&
        poetry run python -m devcycle.core.acp.agents.testing_agent
      "
    restart: unless-stopped

  # Code Generator Agent
  code-generator-agent:
    build: .
    container_name: devcycle-code-generator
    depends_on:
      app:
        condition: service_started
    environment:
      - ACP_SERVER_URL=http://app:8000
      - ACP_AGENT_ID=code-generator
      - ACP_AGENT_NAME=Code Generator Agent
      - ACP_AGENT_VERSION=1.0.0
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - LOG_LEVEL=INFO
    command: >
      bash -c "
        echo 'Starting Code Generator Agent...' &&
        poetry run python -m devcycle.core.acp.agents.code_generator_agent
      "
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devcycle-postgres
    restart: unless-stopped
    ports:
      - "${DOCKER_POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DOCKER_POSTGRES_DB:-devcycle}
      POSTGRES_USER: ${DOCKER_POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD:-devcycle123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DOCKER_POSTGRES_USER:-postgres} -d ${DOCKER_POSTGRES_DB:-devcycle}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

  # Redis Cache (for session management and token blacklisting)
  redis:
    image: redis:7-alpine
    container_name: devcycle-redis
    restart: unless-stopped
    ports:
      - "${DOCKER_REDIS_PORT:-6379}:6379"
    environment:
      REDIS_PASSWORD: ${DOCKER_REDIS_PASSWORD:-}
    command: >
      sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-server --requirepass $$REDIS_PASSWORD --appendonly yes
        else
          redis-server --appendonly yes
        fi
      "
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default

  # DevCycle Application with ACP Integration
  app:
    image: python:3.12-slim
    container_name: devcycle-app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - ENVIRONMENT=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=devcycle123
      - DB_DATABASE=devcycle
      - REDIS_URL=redis://redis:6379/0
      - ACP_SERVER_URL=http://app:8000
      - ACP_AGENT_ID=devcycle-orchestrator
      - ACP_AGENT_NAME=DevCycle Orchestrator
      - ACP_AGENT_VERSION=1.0.0
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - LOG_LEVEL=INFO
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - .:/app
      - ./logs:/var/log/acp
    working_dir: /app
    command: >
      bash -c "
        apt-get update && apt-get install -y postgresql-client &&
        pip install poetry &&
        poetry config virtualenvs.create false &&
        poetry install --only=main &&
        echo 'Waiting for database...' &&
        while ! pg_isready -h postgres -p 5432 -U postgres; do sleep 1; done &&
        echo 'Database ready, running migrations...' &&
        poetry run aerich upgrade &&
        echo 'Starting ACP-enabled application...' &&
        poetry run uvicorn devcycle.api.app:app --host 0.0.0.0 --port 8000 --reload
      "
    ports:
      - "8000:8000"
    restart: unless-stopped

  # Elasticsearch for ACP monitoring
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: devcycle-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped

  # Kibana for ACP monitoring visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: devcycle-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    volumes:
      - ./kibana:/usr/share/kibana/config/dashboards
    restart: unless-stopped

  # Logstash for ACP log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: devcycle-logstash
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/var/log/acp
    depends_on:
      - elasticsearch
    restart: unless-stopped

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    name: devcycle-network
